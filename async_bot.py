import config
import logging
import nst
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.executor import start_webhook

from shutil import copyfile


# webhook settings
# WEBHOOK_HOST = 'https://your.domain'
# WEBHOOK_PATH = '/path/to/api'
# WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# webserver settings
# WEBAPP_HOST = 'localhost'  # or ip
# WEBAPP_PORT = 3001

# port
# PORT = int(os.environ.get('PORT', 5000))

# logging level
logging.basicConfig(level=logging.INFO)

# initialize bot
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


# start message
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    sti = open('images/source/fallout.webp', 'rb')
    await bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup_general = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button3_general = types.KeyboardButton('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ üöÄ')
    button4_general = types.KeyboardButton('–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä ü§∑Ô∏è')

    markup_general.add(button3_general, button4_general)

    await bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!\n–Ø - <b>{1.first_name}</b>,  '
                                            '—Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É üé®'
                                            ''.format(message.from_user, await bot.get_me()),
                           parse_mode='html', reply_markup=markup_general)
    await bot.send_message(message.chat.id, '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? ‚û°Ô∏è /help')


# help
@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    await bot.send_message(message.chat.id, '–Ø —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∏–ª—å —Å –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –¥—Ä—É–≥—É—é.'
                                            '–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.'
                                            '–ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å. –î–∞–ª–µ–µ, '
                                            '—Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π –Ω–∞ –≤—ã–±–æ—Ä. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä '
                                            '–æ–±—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–µ—à—å —Ç–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä"')


# chat
@dp.message_handler(content_types=['text'])
async def chat(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ üöÄ':
            await bot.send_message(message.chat.id,
                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. '
                                   '–õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ '
                                   '–º–∞–≥–∏–∏ —Ñ–æ—Ç–æ –∫–∞–¥—Ä–∏—Ä—É–µ—Ç—Å—è.')
        elif message.text == '–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä ü§∑Ô∏è':
            content_pic = open('images/source/dog.jpg', 'rb')
            result_pic = open('images/results/result24.jpg', 'rb')

            reply_markup = types.InlineKeyboardMarkup(row_width=2, one_time_keyboard=True)


            await bot.send_photo(message.chat.id, content_pic)
            await bot.send_message(message.chat.id, '–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ —Å–æ–±–∞—á–∫–∏ üê∂Ô∏è')
            await bot.send_photo(message.chat.id, result_pic)
            await bot.send_message(message.chat.id, '...–∞ —è –¥–µ–ª–∞—é –∏–∑ –Ω–µ–µ —Ü–≤–µ—Ç–Ω—É—é —Å–æ–±–∞–∫—É! ü§° Ô∏è',
                                   reply_markup=reply_markup)

        else:
            await bot.send_message(message.chat.id, '–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å üò¢')


# save photo
@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    await message.photo[-1].download('./images/source/content_image.jpg')
    await bot.send_message(message.chat.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')

    style_reply_markup = types.InlineKeyboardMarkup(row_width=2, one_time_keyboard=True)
    style_reply_button1 = types.InlineKeyboardButton('–ö–æ–º–∏–∫—Å—ã', callback_data='marvel')
    style_reply_button2 = types.InlineKeyboardButton('–ü–∏–∫–∞—Å—Å–æ', callback_data='picasso')
    style_reply_button3 = types.InlineKeyboardButton('–õ–∏—Ü–æ', callback_data='face')
    style_reply_button4 = types.InlineKeyboardButton('–õ–µ–≥–æ', callback_data='lego')
    style_reply_button5 = types.InlineKeyboardButton('–ö–æ–Ω—Ñ–µ—Ç–∫–∏', callback_data='sweet')
    style_reply_button6 = types.InlineKeyboardButton('–ú–∞–∫–∞—Ä–æ–Ω—ã', callback_data='makaroni')

    style_reply_markup.add(style_reply_button1,
                           style_reply_button2,
                           style_reply_button3,
                           style_reply_button4,
                           style_reply_button5,
                           style_reply_button6)

    media = types.MediaGroup()
    media.attach_photo(types.InputFile('images/source/marvel.jpg'), '–≠—Ç–æ –ö–æ–º–∏–∫—Å—ã Marvel')
    media.attach_photo(types.InputFile('images/source/picasso.jpg'), '–≠—Ç–æ –ü–∏–∫–∞—Åco')
    media.attach_photo(types.InputFile('images/source/face.jpg'), '–≠—Ç–æ –õ–∏—Ü–æ')
    media.attach_photo(types.InputFile('images/source/lego.jpg'), '–≠—Ç–æ –õ–µ–≥–æ')
    media.attach_photo(types.InputFile('images/source/sweet.jpg'), '–≠—Ç–æ –ö–æ–Ω—Ñ–µ—Ç–∫–∏')
    media.attach_photo(types.InputFile('images/source/makaroni.jpg'), '–≠—Ç–æ –ú–∞–∫–∞—Ä–æ–Ω—ã')


    await bot.send_media_group(chat_id=message.chat.id, media = media)
    await bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ç–∏–ª—å! üñº:', reply_markup=style_reply_markup)


# callback
@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            # style
            if call.data == 'marvel':
                await bot.send_message(call.message.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!')
                copyfile('images/source/marvel.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'picasso':
                await bot.send_message(call.message.chat.id, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!')
                copyfile('images/source/picasso.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'face':
                await bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!')
                copyfile('images/source/face.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'lego':
                await bot.send_message(call.message.chat.id, '–¢–æ–ø!')
                copyfile('images/source/lego.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'sweet':
                await bot.send_message(call.message.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!')
                copyfile('images/source/sweet.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'makaroni':
                await bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!')
                copyfile('images/source/makaroni.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)

            # remove inline buttons
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='...',
                                        reply_markup=None)
    except Exception as e:
        print(repr(e))


# launch style transfer
async def launch_nst(message):
    # print('ok')
    content_image_name = 'images/source/content_image.jpg'
    style_image_name = 'images/source/style_image.jpg'

    await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –≠—Ç–æ –∑–∞–π–º—ë—Ç —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!) üîÆÔ∏è')

    nst.main(content_image_name, style_image_name)

    await bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!')

    result = open('images/results/bot-result.png', 'rb')

    await bot.send_photo(message.chat.id, result)

    await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. üí´')


# async def on_startup(dp):
#    await bot.set_webhook(WEBHOOK_URL)
    # insert code here to run it after start


# async def on_shutdown(dp):
#    logging.warning('Shutting down..')

    # insert code here to run it before shutdown

    # Remove webhook (not acceptable in some cases)
#    await bot.delete_webhook()

    # Close DB connection (if used)
#    await dp.storage.close()
#    await dp.storage.wait_closed()

 #   logging.warning('Bye!')


# launch long polling
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    #start_webhook(listen='0.0.0.0', port=int(PORT), url_path=config.TOKEN)
    #executor.set_webhook('https://style-tg-bot.herokuapp.com/' + config.TOKEN)
    #start_webhook(
    #    dispatcher=dp,
    #    webhook_path=WEBHOOK_PATH,
    #    on_startup=on_startup,
    #    on_shutdown=on_shutdown,
    #    skip_updates=True,
    #    host=WEBAPP_HOST,
    #    port=WEBAPP_PORT,
    #)
